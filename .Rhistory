View(outcomeTable)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
rankall("pneumonia", "worst")
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(outcomeTableState)
View(rankState)
View(outcomeTableState)
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Creating the data that will hold the results
rankState
}
undebug(rankall)
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
rankall("pneumonia", "worst")
debug(rankall)
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
#Creating the variables that will receive the State and the result for this State and the dataframe
stateName <- NA
hospital <- NA
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
#Creating the variables that will receive the State and the result for this State and the dataframe
stateName <- NA
hospital <- NA
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
hospital
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
#Creating the variables that will receive the State and the result for this State and the dataframe
stateName <- NA
hospital <- NA
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
print(hospital)
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
#Creating the variables that will receive the State and the result for this State and the dataframe
stateName <- NA
hospital <- NA
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
print(head(outcomeTableState))
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
#Creating the variables that will receive the State and the result for this State and the dataframe
stateName <- NA
hospital <- NA
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
print(tail(outcomeTableState))
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
#Creating the variables that will receive the State and the result for this State and the dataframe
stateName <- NA
hospital <- NA
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
print(tail(outcomeTableState))
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
print(hospital)
print(outcomeTableState[num, 1])
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
rankall <- function (outcome, num = "best") {
# Reading the table and selecting just the columns we need
outcomeTable <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTable <- outcomeTable[, c(2, 7, 11, 17, 23)]
# Registering key words for invalid outcome detection
cause <- c("heart attack", "heart failure", "pneumonia")
# Check for invalid outcome
if (is.element(outcome, cause) == FALSE) {
stop("invalid outcome")
}
# Passing the value of the outcome columns as numeric values
outcomeTable[, 3] <- as.numeric(outcomeTable[, 3])
outcomeTable[, 4] <- as.numeric(outcomeTable[, 4])
outcomeTable[, 5] <- as.numeric(outcomeTable[, 5])
# Renaming the columns for easier reading
names(outcomeTable) <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
# Reducing the table according to the outcome
if (outcome == "heart attack") {
outcomeTable <- outcomeTable[, c(1, 2, 3)]
} else if (outcome == "heart failure") {
outcomeTable <- outcomeTable[, c(1, 2, 4)]
} else if (outcome =="pneumonia") {
outcomeTable <- outcomeTable[, c(1, 2, 5)]
}
# Creating a variable containing all states and sorting them
allState <- unique(outcomeTable[, 2])
allState <- sort(allState)
# Treating best scenario
if (num == "best") {
num <- 1
}
#Creating the variables that will receive the State and the result for this State and the dataframe
stateName <- NA
hospital <- NA
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
# for loop to get the required hosp name per state
for (i in allState) {
outcomeTableState <- subset(outcomeTable, outcomeTable$state == i)
outcomeTableState <- outcomeTableState[order(outcomeTableState[, 3], outcomeTableState[, 1], na.last = NA),]
#Treating worst scenarios
if (num == "worst") {
num <- nrow(outcomeTableState)
}
print(tail(outcomeTableState))
print(outcomeTableState[num, 1])
#Creating the variables that will receive the State and the result for this State (and incrementing them)
stateName <- c(stateName, i)
hospital <- c(hospital, outcomeTableState[num, 1])
print(hospital)
# Creating the data that will hold the results
rankState <- data.frame(hospital, stateName, stringsAsFactors = FALSE)
}
# Calling the results
rankState
}
rankall("pneumonia", "worst")
